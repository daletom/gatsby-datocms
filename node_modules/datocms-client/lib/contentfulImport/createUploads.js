"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var datoClient, contentfulData, spinner, assets, progress, contentfulAssetsMap, _iterator, _step, _loop;

    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
            spinner = (0, _ora["default"])('').start();
            _context2.prev = 2;
            assets = contentfulData.assets;
            progress = new _progress["default"](assets.length, 'Uploading assets');
            spinner.text = progress.tick();
            contentfulAssetsMap = {};
            _iterator = _createForOfIteratorHelper(assets);
            _context2.prev = 8;
            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
              var asset, fileAttributes, fileUrl, path, defaultFieldMetadata, upload;
              return regeneratorRuntime.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      asset = _step.value;

                      if (!(asset.fields && asset.fields.file)) {
                        _context.next = 12;
                        break;
                      }

                      fileAttributes = asset.fields.file[contentfulData.defaultLocale];
                      fileUrl = "https:".concat(fileAttributes.url);
                      _context.next = 6;
                      return datoClient.createUploadPath(fileUrl);

                    case 6:
                      path = _context.sent;
                      defaultFieldMetadata = contentfulData.locales.reduce(function (acc, locale) {
                        return Object.assign(acc, _defineProperty({}, locale, {
                          title: asset.fields.title[locale],
                          alt: asset.fields.description ? asset.fields.description[locale] : asset.fields.title[locale],
                          customData: {}
                        }));
                      }, {});
                      _context.next = 10;
                      return datoClient.uploads.create({
                        path: path,
                        author: null,
                        copyright: null,
                        defaultFieldMetadata: defaultFieldMetadata
                      });

                    case 10:
                      upload = _context.sent;
                      contentfulAssetsMap[asset.sys.id.toString()] = upload.id;

                    case 12:
                      spinner.text = progress.tick();

                    case 13:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop);
            });

            _iterator.s();

          case 11:
            if ((_step = _iterator.n()).done) {
              _context2.next = 15;
              break;
            }

            return _context2.delegateYield(_loop(), "t0", 13);

          case 13:
            _context2.next = 11;
            break;

          case 15:
            _context2.next = 20;
            break;

          case 17:
            _context2.prev = 17;
            _context2.t1 = _context2["catch"](8);

            _iterator.e(_context2.t1);

          case 20:
            _context2.prev = 20;

            _iterator.f();

            return _context2.finish(20);

          case 23:
            spinner.succeed();
            return _context2.abrupt("return", contentfulAssetsMap);

          case 27:
            _context2.prev = 27;
            _context2.t2 = _context2["catch"](2);
            spinner.fail();
            throw _context2.t2;

          case 31:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[2, 27], [8, 17, 20, 23]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;