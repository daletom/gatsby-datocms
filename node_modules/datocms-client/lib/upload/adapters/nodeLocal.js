"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = nodeLocal;

var _axios = _interopRequireDefault(require("axios"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _mimeTypes = _interopRequireDefault(require("mime-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function uploadToS3(url, filePath, _ref) {
  var onProgress = _ref.onProgress;

  var totalLength = _fs["default"].statSync(filePath).size;

  var cancelTokenSource = _axios["default"].CancelToken.source();

  var promise = (0, _axios["default"])({
    url: url,
    method: 'put',
    headers: {
      'Content-Type': _mimeTypes["default"].lookup(filePath),
      'Content-Length': totalLength
    },
    data: onProgress ? _fs["default"].createReadStream(filePath) : _fs["default"].readFileSync(filePath),
    transformRequest: onProgress ? [function (data) {
      var progressLength = 0;

      var listener = function listener(chunk) {
        progressLength += chunk.length;
        onProgress({
          type: 'upload',
          payload: {
            percent: Math.round(progressLength * 100 / totalLength)
          }
        });
      };

      data.on('data', listener);
      return data;
    }] : undefined,
    maxContentLength: 1000000000,
    cancelToken: cancelTokenSource.token
  });
  return {
    promise: promise,
    cancel: function cancel() {
      return cancelTokenSource.cancel('aborted');
    }
  };
}

function nodeLocal(client, filePath, options) {
  var isCancelled = false;

  var _cancel = function cancel() {
    isCancelled = true;
  };

  var promise = client.uploadRequest.create({
    filename: options.filename || _path["default"].basename(filePath)
  }).then(function (_ref2) {
    var id = _ref2.id,
        url = _ref2.url;

    if (isCancelled) {
      return Promise.reject(new Error('upload aborted'));
    }

    if (options.onProgress) {
      options.onProgress({
        type: 'uploadRequestComplete',
        payload: {
          id: id,
          url: url
        }
      });
    }

    var _uploadToS = uploadToS3(url, filePath, {
      onProgress: options.onProgress
    }),
        uploadPromise = _uploadToS.promise,
        cancelUpload = _uploadToS.cancel;

    _cancel = cancelUpload;
    return uploadPromise.then(function () {
      return id;
    });
  });
  return {
    promise: promise,
    cancel: function cancel() {
      return _cancel();
    }
  };
}