"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Queue = require('promise-queue');

var fs = require('fs-extra');

var path = require('path');

var md5 = require('md5');

var got = require('got');

var resizeUrl = require('./resizeUrl');

var queryString = require('query-string');

var queue = new Queue(10, Infinity);

function download(requestUrl, cacheDir) {
  var cacheFile = path.join(cacheDir, md5(requestUrl));

  if (fs.existsSync(cacheFile)) {
    var body = fs.readFileSync(cacheFile, 'utf8');
    return Promise.resolve(body);
  }

  return queue.add(function () {
    return got(encodeURI(requestUrl), {
      encoding: 'base64',
      retry: {
        limit: 100,
        calculateDelay: function calculateDelay() {
          return 1000;
        }
      }
    }).then(function (res) {
      var data = 'data:' + res.headers['content-type'] + ';base64,' + res.body;
      fs.writeFileSync(cacheFile, data, 'utf8');
      return data;
    });
  });
}

module.exports = function (_ref, cacheDir) {
  var forceBlurhash = _ref.forceBlurhash,
      format = _ref.format,
      src = _ref.src,
      width = _ref.width,
      height = _ref.height,
      aspectRatio = _ref.aspectRatio;

  var _src$split = src.split('?'),
      _src$split2 = _slicedToArray(_src$split, 2),
      baseUrl = _src$split2[0],
      query = _src$split2[1];

  if (!baseUrl.startsWith('https://www.datocms-assets.com/') || format === 'png' && !forceBlurhash) {
    return download(resizeUrl({
      url: src,
      aspectRatio: aspectRatio,
      width: width,
      height: height
    }, 20), cacheDir);
  }

  var imgixParams = queryString.parse(query);
  imgixParams.lqip = 'blurhash';
  return download("".concat(baseUrl, "?").concat(queryString.stringify(imgixParams)), cacheDir);
};